tree <- tree[!duplicated(tree), ]
tree_list[[ii]] <- tree
}
all_trees <- bind_rows(tree_list)
tree_df <- data.frame(wrong_name = sort(unique(all_trees[['DESC_LATIN']])),
right_name = NA)
rem_dom <- function(input) {
if ('seedling/sp' %in% input) {
return(gsub("\\s*\\([^\\)]+\\)", "", input))
} else {
return(input)
}
}
wrong_sp <- c('sp', 'spp', 'sp.', 'spp.', 'seedling', 'sp/seedling', 'seedling/sp')
DOM_codes <- c('C', 'S', 'I', 'U', 'H', 'A', 'E')
file_dir <- '../Data/'
list_of_files <- list.files(file_dir)
N_files <- length(list_of_files)
tree_list = list()
for (ii in 1:N_files) {
print(list_of_files[ii])
# getting only the important columns from the tree sheet
# dominannce sheet has the information in the same format as spec template
file_path <- paste(file_dir, list_of_files[ii], sep='')
tree <- read_excel(file_path, sheet = "Dominance Template") %>%
select(., contains(c('PLOT_ID', 'DESC_LATIN', 'DOM_CODE'))) %>%
.[!is.na(.$DESC_LATIN), ]
tree[['PLOT_ID']] <- as.character(tree[['PLOT_ID']])
tree[['DOM_CODE']] <- as.character(tree[['DOM_CODE']])
# there are lots of typos around sp. for trees in needs to be 'seedling/sp'
tree[['DESC_LATIN']] <- tree[['DESC_LATIN']] %>%
gsub("[.]", '', .) %>%
gsub("[/]", '', .)
for (jj in 1:length(wrong_sp)) {
tree[['DESC_LATIN']] <- sub(wrong_sp[jj], '', tree[['DESC_LATIN']])
}
# Getting rid of the wrong mavis dominance codes
# needs to be done early to add the appropriate sp/seedling
tree[['DESC_LATIN']] <- tree[['DESC_LATIN']] %>%
str_trim() %>%
gsub("\\s*\\([^\\)]+\\)", "", .) %>%
map_chr(., append_str, ' seedling/sp')
# sometimes the dominance code isnt one of the accepted ones but still
# can be understood
tree[['DOM_CODE']] <- mapvalues(tree[['DOM_CODE']],
c('Tree'),
c('C'),
warn_missing = FALSE)
# sometimes the dominance codes are combined into one col
for (jj in 1:length(DOM_codes)) {
tree <- tree %>%
bind_rows(., filter(., str_detect(DOM_CODE, DOM_codes[jj])) %>%
mutate(DOM_CODE = DOM_codes[jj])) %>%
arrange(PLOT_ID)
}
# removes all the combined codes
tree <-  filter(tree, DOM_CODE %in% c(DOM_codes, NA))
# converts the dominance codes into codes recognised by MAVIS
tree[['DOM_CODE']]<- mapvalues(tree[['DOM_CODE']],
c('C', 'S', 'I', 'U', 'H', 'A', 'E'),
c('(c)', '(c)', '(c)', '(c)', '(s)', '(g)', '(g)'),
warn_missing = FALSE)
# adding back the new correct dominance codes
tree[['DESC_LATIN']] <- paste(tree[['DESC_LATIN']], tree[['DOM_CODE']], sep=' ')
# some of the dom codes are missing so remove the subsequent NA
tree[['DESC_LATIN']] <- sub(' NA', '', tree[['DESC_LATIN']])
tree[['DESC_LATIN']] <- map_chr(tree[['DESC_LATIN']], rem_dom)
# removing the superfluous dom code column now
tree <- tree[ , !(names(tree) %in% 'DOM_CODE')]
# find unique values
tree <- tree[!duplicated(tree), ]
tree_list[[ii]] <- tree
}
all_trees <- bind_rows(tree_list)
tree_df <- data.frame(wrong_name = sort(unique(all_trees[['DESC_LATIN']])),
right_name = NA)
rem_dom <- function(input) {
if ('seedling/sp' %in% input) {
print(gsub("\\s*\\([^\\)]+\\)", "", input))
return(gsub("\\s*\\([^\\)]+\\)", "", input))
} else {
return(input)
}
}
wrong_sp <- c('sp', 'spp', 'sp.', 'spp.', 'seedling', 'sp/seedling', 'seedling/sp')
DOM_codes <- c('C', 'S', 'I', 'U', 'H', 'A', 'E')
file_dir <- '../Data/'
list_of_files <- list.files(file_dir)
N_files <- length(list_of_files)
tree_list = list()
for (ii in 1:N_files) {
print(list_of_files[ii])
# getting only the important columns from the tree sheet
# dominannce sheet has the information in the same format as spec template
file_path <- paste(file_dir, list_of_files[ii], sep='')
tree <- read_excel(file_path, sheet = "Dominance Template") %>%
select(., contains(c('PLOT_ID', 'DESC_LATIN', 'DOM_CODE'))) %>%
.[!is.na(.$DESC_LATIN), ]
tree[['PLOT_ID']] <- as.character(tree[['PLOT_ID']])
tree[['DOM_CODE']] <- as.character(tree[['DOM_CODE']])
# there are lots of typos around sp. for trees in needs to be 'seedling/sp'
tree[['DESC_LATIN']] <- tree[['DESC_LATIN']] %>%
gsub("[.]", '', .) %>%
gsub("[/]", '', .)
for (jj in 1:length(wrong_sp)) {
tree[['DESC_LATIN']] <- sub(wrong_sp[jj], '', tree[['DESC_LATIN']])
}
# Getting rid of the wrong mavis dominance codes
# needs to be done early to add the appropriate sp/seedling
tree[['DESC_LATIN']] <- tree[['DESC_LATIN']] %>%
str_trim() %>%
gsub("\\s*\\([^\\)]+\\)", "", .) %>%
map_chr(., append_str, ' seedling/sp')
# sometimes the dominance code isnt one of the accepted ones but still
# can be understood
tree[['DOM_CODE']] <- mapvalues(tree[['DOM_CODE']],
c('Tree'),
c('C'),
warn_missing = FALSE)
# sometimes the dominance codes are combined into one col
for (jj in 1:length(DOM_codes)) {
tree <- tree %>%
bind_rows(., filter(., str_detect(DOM_CODE, DOM_codes[jj])) %>%
mutate(DOM_CODE = DOM_codes[jj])) %>%
arrange(PLOT_ID)
}
# removes all the combined codes
tree <-  filter(tree, DOM_CODE %in% c(DOM_codes, NA))
# converts the dominance codes into codes recognised by MAVIS
tree[['DOM_CODE']]<- mapvalues(tree[['DOM_CODE']],
c('C', 'S', 'I', 'U', 'H', 'A', 'E'),
c('(c)', '(c)', '(c)', '(c)', '(s)', '(g)', '(g)'),
warn_missing = FALSE)
# adding back the new correct dominance codes
tree[['DESC_LATIN']] <- paste(tree[['DESC_LATIN']], tree[['DOM_CODE']], sep=' ')
# some of the dom codes are missing so remove the subsequent NA
tree[['DESC_LATIN']] <- sub(' NA', '', tree[['DESC_LATIN']])
tree[['DESC_LATIN']] <- map_chr(tree[['DESC_LATIN']], rem_dom)
# removing the superfluous dom code column now
tree <- tree[ , !(names(tree) %in% 'DOM_CODE')]
# find unique values
tree <- tree[!duplicated(tree), ]
tree_list[[ii]] <- tree
}
all_trees <- bind_rows(tree_list)
tree_df <- data.frame(wrong_name = sort(unique(all_trees[['DESC_LATIN']])),
right_name = NA)
rem_dom <- function(input) {
if ('seedling/sp' %in% input) {
print(gsub("\\s*\\([^\\)]+\\)", "", input))
return(gsub("\\s*\\([^\\)]+\\)", "", input))
} else {
print('hey')
return(input)
}
}
wrong_sp <- c('sp', 'spp', 'sp.', 'spp.', 'seedling', 'sp/seedling', 'seedling/sp')
DOM_codes <- c('C', 'S', 'I', 'U', 'H', 'A', 'E')
file_dir <- '../Data/'
list_of_files <- list.files(file_dir)
N_files <- length(list_of_files)
tree_list = list()
for (ii in 1:N_files) {
print(list_of_files[ii])
# getting only the important columns from the tree sheet
# dominannce sheet has the information in the same format as spec template
file_path <- paste(file_dir, list_of_files[ii], sep='')
tree <- read_excel(file_path, sheet = "Dominance Template") %>%
select(., contains(c('PLOT_ID', 'DESC_LATIN', 'DOM_CODE'))) %>%
.[!is.na(.$DESC_LATIN), ]
tree[['PLOT_ID']] <- as.character(tree[['PLOT_ID']])
tree[['DOM_CODE']] <- as.character(tree[['DOM_CODE']])
# there are lots of typos around sp. for trees in needs to be 'seedling/sp'
tree[['DESC_LATIN']] <- tree[['DESC_LATIN']] %>%
gsub("[.]", '', .) %>%
gsub("[/]", '', .)
for (jj in 1:length(wrong_sp)) {
tree[['DESC_LATIN']] <- sub(wrong_sp[jj], '', tree[['DESC_LATIN']])
}
# Getting rid of the wrong mavis dominance codes
# needs to be done early to add the appropriate sp/seedling
tree[['DESC_LATIN']] <- tree[['DESC_LATIN']] %>%
str_trim() %>%
gsub("\\s*\\([^\\)]+\\)", "", .) %>%
map_chr(., append_str, ' seedling/sp')
# sometimes the dominance code isnt one of the accepted ones but still
# can be understood
tree[['DOM_CODE']] <- mapvalues(tree[['DOM_CODE']],
c('Tree'),
c('C'),
warn_missing = FALSE)
# sometimes the dominance codes are combined into one col
for (jj in 1:length(DOM_codes)) {
tree <- tree %>%
bind_rows(., filter(., str_detect(DOM_CODE, DOM_codes[jj])) %>%
mutate(DOM_CODE = DOM_codes[jj])) %>%
arrange(PLOT_ID)
}
# removes all the combined codes
tree <-  filter(tree, DOM_CODE %in% c(DOM_codes, NA))
# converts the dominance codes into codes recognised by MAVIS
tree[['DOM_CODE']]<- mapvalues(tree[['DOM_CODE']],
c('C', 'S', 'I', 'U', 'H', 'A', 'E'),
c('(c)', '(c)', '(c)', '(c)', '(s)', '(g)', '(g)'),
warn_missing = FALSE)
# adding back the new correct dominance codes
tree[['DESC_LATIN']] <- paste(tree[['DESC_LATIN']], tree[['DOM_CODE']], sep=' ')
# some of the dom codes are missing so remove the subsequent NA
tree[['DESC_LATIN']] <- sub(' NA', '', tree[['DESC_LATIN']])
tree[['DESC_LATIN']] <- map_chr(tree[['DESC_LATIN']], rem_dom)
# removing the superfluous dom code column now
tree <- tree[ , !(names(tree) %in% 'DOM_CODE')]
# find unique values
tree <- tree[!duplicated(tree), ]
tree_list[[ii]] <- tree
}
all_trees <- bind_rows(tree_list)
tree_df <- data.frame(wrong_name = sort(unique(all_trees[['DESC_LATIN']])),
right_name = NA)
rem_dom <- function(input) {
if ('seedling/sp' %in% input) {
print('hey')
return(gsub("\\s*\\([^\\)]+\\)", "", input))
} else {
return(input)
}
}
wrong_sp <- c('sp', 'spp', 'sp.', 'spp.', 'seedling', 'sp/seedling', 'seedling/sp')
DOM_codes <- c('C', 'S', 'I', 'U', 'H', 'A', 'E')
file_dir <- '../Data/'
list_of_files <- list.files(file_dir)
N_files <- length(list_of_files)
tree_list = list()
for (ii in 1:N_files) {
print(list_of_files[ii])
# getting only the important columns from the tree sheet
# dominannce sheet has the information in the same format as spec template
file_path <- paste(file_dir, list_of_files[ii], sep='')
tree <- read_excel(file_path, sheet = "Dominance Template") %>%
select(., contains(c('PLOT_ID', 'DESC_LATIN', 'DOM_CODE'))) %>%
.[!is.na(.$DESC_LATIN), ]
tree[['PLOT_ID']] <- as.character(tree[['PLOT_ID']])
tree[['DOM_CODE']] <- as.character(tree[['DOM_CODE']])
# there are lots of typos around sp. for trees in needs to be 'seedling/sp'
tree[['DESC_LATIN']] <- tree[['DESC_LATIN']] %>%
gsub("[.]", '', .) %>%
gsub("[/]", '', .)
for (jj in 1:length(wrong_sp)) {
tree[['DESC_LATIN']] <- sub(wrong_sp[jj], '', tree[['DESC_LATIN']])
}
# Getting rid of the wrong mavis dominance codes
# needs to be done early to add the appropriate sp/seedling
tree[['DESC_LATIN']] <- tree[['DESC_LATIN']] %>%
str_trim() %>%
gsub("\\s*\\([^\\)]+\\)", "", .) %>%
map_chr(., append_str, ' seedling/sp')
# sometimes the dominance code isnt one of the accepted ones but still
# can be understood
tree[['DOM_CODE']] <- mapvalues(tree[['DOM_CODE']],
c('Tree'),
c('C'),
warn_missing = FALSE)
# sometimes the dominance codes are combined into one col
for (jj in 1:length(DOM_codes)) {
tree <- tree %>%
bind_rows(., filter(., str_detect(DOM_CODE, DOM_codes[jj])) %>%
mutate(DOM_CODE = DOM_codes[jj])) %>%
arrange(PLOT_ID)
}
# removes all the combined codes
tree <-  filter(tree, DOM_CODE %in% c(DOM_codes, NA))
# converts the dominance codes into codes recognised by MAVIS
tree[['DOM_CODE']]<- mapvalues(tree[['DOM_CODE']],
c('C', 'S', 'I', 'U', 'H', 'A', 'E'),
c('(c)', '(c)', '(c)', '(c)', '(s)', '(g)', '(g)'),
warn_missing = FALSE)
# adding back the new correct dominance codes
tree[['DESC_LATIN']] <- paste(tree[['DESC_LATIN']], tree[['DOM_CODE']], sep=' ')
# some of the dom codes are missing so remove the subsequent NA
tree[['DESC_LATIN']] <- sub(' NA', '', tree[['DESC_LATIN']])
tree[['DESC_LATIN']] <- map_chr(tree[['DESC_LATIN']], rem_dom)
# removing the superfluous dom code column now
tree <- tree[ , !(names(tree) %in% 'DOM_CODE')]
# find unique values
tree <- tree[!duplicated(tree), ]
tree_list[[ii]] <- tree
}
all_trees <- bind_rows(tree_list)
tree_df <- data.frame(wrong_name = sort(unique(all_trees[['DESC_LATIN']])),
right_name = NA)
rem_dom <- function(input) {
print(input)
if ('seedling/sp' %in% input) {
print('hey')
return(gsub("\\s*\\([^\\)]+\\)", "", input))
} else {
return(input)
}
}
wrong_sp <- c('sp', 'spp', 'sp.', 'spp.', 'seedling', 'sp/seedling', 'seedling/sp')
DOM_codes <- c('C', 'S', 'I', 'U', 'H', 'A', 'E')
file_dir <- '../Data/'
list_of_files <- list.files(file_dir)
N_files <- length(list_of_files)
tree_list = list()
for (ii in 1:N_files) {
print(list_of_files[ii])
# getting only the important columns from the tree sheet
# dominannce sheet has the information in the same format as spec template
file_path <- paste(file_dir, list_of_files[ii], sep='')
tree <- read_excel(file_path, sheet = "Dominance Template") %>%
select(., contains(c('PLOT_ID', 'DESC_LATIN', 'DOM_CODE'))) %>%
.[!is.na(.$DESC_LATIN), ]
tree[['PLOT_ID']] <- as.character(tree[['PLOT_ID']])
tree[['DOM_CODE']] <- as.character(tree[['DOM_CODE']])
# there are lots of typos around sp. for trees in needs to be 'seedling/sp'
tree[['DESC_LATIN']] <- tree[['DESC_LATIN']] %>%
gsub("[.]", '', .) %>%
gsub("[/]", '', .)
for (jj in 1:length(wrong_sp)) {
tree[['DESC_LATIN']] <- sub(wrong_sp[jj], '', tree[['DESC_LATIN']])
}
# Getting rid of the wrong mavis dominance codes
# needs to be done early to add the appropriate sp/seedling
tree[['DESC_LATIN']] <- tree[['DESC_LATIN']] %>%
str_trim() %>%
gsub("\\s*\\([^\\)]+\\)", "", .) %>%
map_chr(., append_str, ' seedling/sp')
# sometimes the dominance code isnt one of the accepted ones but still
# can be understood
tree[['DOM_CODE']] <- mapvalues(tree[['DOM_CODE']],
c('Tree'),
c('C'),
warn_missing = FALSE)
# sometimes the dominance codes are combined into one col
for (jj in 1:length(DOM_codes)) {
tree <- tree %>%
bind_rows(., filter(., str_detect(DOM_CODE, DOM_codes[jj])) %>%
mutate(DOM_CODE = DOM_codes[jj])) %>%
arrange(PLOT_ID)
}
# removes all the combined codes
tree <-  filter(tree, DOM_CODE %in% c(DOM_codes, NA))
# converts the dominance codes into codes recognised by MAVIS
tree[['DOM_CODE']]<- mapvalues(tree[['DOM_CODE']],
c('C', 'S', 'I', 'U', 'H', 'A', 'E'),
c('(c)', '(c)', '(c)', '(c)', '(s)', '(g)', '(g)'),
warn_missing = FALSE)
# adding back the new correct dominance codes
tree[['DESC_LATIN']] <- paste(tree[['DESC_LATIN']], tree[['DOM_CODE']], sep=' ')
# some of the dom codes are missing so remove the subsequent NA
tree[['DESC_LATIN']] <- sub(' NA', '', tree[['DESC_LATIN']])
tree[['DESC_LATIN']] <- map_chr(tree[['DESC_LATIN']], rem_dom)
# removing the superfluous dom code column now
tree <- tree[ , !(names(tree) %in% 'DOM_CODE')]
# find unique values
tree <- tree[!duplicated(tree), ]
tree_list[[ii]] <- tree
}
all_trees <- bind_rows(tree_list)
tree_df <- data.frame(wrong_name = sort(unique(all_trees[['DESC_LATIN']])),
right_name = NA)
View(tree)
rem_dom <- function(input) {
if (str_contains(input, 'seedling/sp')) {
print('hey')
return(gsub("\\s*\\([^\\)]+\\)", "", input))
} else {
return(input)
}
}
wrong_sp <- c('sp', 'spp', 'sp.', 'spp.', 'seedling', 'sp/seedling', 'seedling/sp')
DOM_codes <- c('C', 'S', 'I', 'U', 'H', 'A', 'E')
file_dir <- '../Data/'
list_of_files <- list.files(file_dir)
N_files <- length(list_of_files)
tree_list = list()
for (ii in 1:N_files) {
print(list_of_files[ii])
# getting only the important columns from the tree sheet
# dominannce sheet has the information in the same format as spec template
file_path <- paste(file_dir, list_of_files[ii], sep='')
tree <- read_excel(file_path, sheet = "Dominance Template") %>%
select(., contains(c('PLOT_ID', 'DESC_LATIN', 'DOM_CODE'))) %>%
.[!is.na(.$DESC_LATIN), ]
tree[['PLOT_ID']] <- as.character(tree[['PLOT_ID']])
tree[['DOM_CODE']] <- as.character(tree[['DOM_CODE']])
# there are lots of typos around sp. for trees in needs to be 'seedling/sp'
tree[['DESC_LATIN']] <- tree[['DESC_LATIN']] %>%
gsub("[.]", '', .) %>%
gsub("[/]", '', .)
for (jj in 1:length(wrong_sp)) {
tree[['DESC_LATIN']] <- sub(wrong_sp[jj], '', tree[['DESC_LATIN']])
}
# Getting rid of the wrong mavis dominance codes
# needs to be done early to add the appropriate sp/seedling
tree[['DESC_LATIN']] <- tree[['DESC_LATIN']] %>%
str_trim() %>%
gsub("\\s*\\([^\\)]+\\)", "", .) %>%
map_chr(., append_str, ' seedling/sp')
# sometimes the dominance code isnt one of the accepted ones but still
# can be understood
tree[['DOM_CODE']] <- mapvalues(tree[['DOM_CODE']],
c('Tree'),
c('C'),
warn_missing = FALSE)
# sometimes the dominance codes are combined into one col
for (jj in 1:length(DOM_codes)) {
tree <- tree %>%
bind_rows(., filter(., str_detect(DOM_CODE, DOM_codes[jj])) %>%
mutate(DOM_CODE = DOM_codes[jj])) %>%
arrange(PLOT_ID)
}
# removes all the combined codes
tree <-  filter(tree, DOM_CODE %in% c(DOM_codes, NA))
# converts the dominance codes into codes recognised by MAVIS
tree[['DOM_CODE']]<- mapvalues(tree[['DOM_CODE']],
c('C', 'S', 'I', 'U', 'H', 'A', 'E'),
c('(c)', '(c)', '(c)', '(c)', '(s)', '(g)', '(g)'),
warn_missing = FALSE)
# adding back the new correct dominance codes
tree[['DESC_LATIN']] <- paste(tree[['DESC_LATIN']], tree[['DOM_CODE']], sep=' ')
# some of the dom codes are missing so remove the subsequent NA
tree[['DESC_LATIN']] <- sub(' NA', '', tree[['DESC_LATIN']])
tree[['DESC_LATIN']] <- map_chr(tree[['DESC_LATIN']], rem_dom)
# removing the superfluous dom code column now
tree <- tree[ , !(names(tree) %in% 'DOM_CODE')]
# find unique values
tree <- tree[!duplicated(tree), ]
tree_list[[ii]] <- tree
}
install.packages("sjmisc")
rem_dom <- function(input) {
if (sjmisc::str_contains(input, 'seedling/sp')) {
print('hey')
return(gsub("\\s*\\([^\\)]+\\)", "", input))
} else {
return(input)
}
}
wrong_sp <- c('sp', 'spp', 'sp.', 'spp.', 'seedling', 'sp/seedling', 'seedling/sp')
DOM_codes <- c('C', 'S', 'I', 'U', 'H', 'A', 'E')
file_dir <- '../Data/'
list_of_files <- list.files(file_dir)
N_files <- length(list_of_files)
tree_list = list()
for (ii in 1:N_files) {
print(list_of_files[ii])
# getting only the important columns from the tree sheet
# dominannce sheet has the information in the same format as spec template
file_path <- paste(file_dir, list_of_files[ii], sep='')
tree <- read_excel(file_path, sheet = "Dominance Template") %>%
select(., contains(c('PLOT_ID', 'DESC_LATIN', 'DOM_CODE'))) %>%
.[!is.na(.$DESC_LATIN), ]
tree[['PLOT_ID']] <- as.character(tree[['PLOT_ID']])
tree[['DOM_CODE']] <- as.character(tree[['DOM_CODE']])
# there are lots of typos around sp. for trees in needs to be 'seedling/sp'
tree[['DESC_LATIN']] <- tree[['DESC_LATIN']] %>%
gsub("[.]", '', .) %>%
gsub("[/]", '', .)
for (jj in 1:length(wrong_sp)) {
tree[['DESC_LATIN']] <- sub(wrong_sp[jj], '', tree[['DESC_LATIN']])
}
# Getting rid of the wrong mavis dominance codes
# needs to be done early to add the appropriate sp/seedling
tree[['DESC_LATIN']] <- tree[['DESC_LATIN']] %>%
str_trim() %>%
gsub("\\s*\\([^\\)]+\\)", "", .) %>%
map_chr(., append_str, ' seedling/sp')
# sometimes the dominance code isnt one of the accepted ones but still
# can be understood
tree[['DOM_CODE']] <- mapvalues(tree[['DOM_CODE']],
c('Tree'),
c('C'),
warn_missing = FALSE)
# sometimes the dominance codes are combined into one col
for (jj in 1:length(DOM_codes)) {
tree <- tree %>%
bind_rows(., filter(., str_detect(DOM_CODE, DOM_codes[jj])) %>%
mutate(DOM_CODE = DOM_codes[jj])) %>%
arrange(PLOT_ID)
}
# removes all the combined codes
tree <-  filter(tree, DOM_CODE %in% c(DOM_codes, NA))
# converts the dominance codes into codes recognised by MAVIS
tree[['DOM_CODE']]<- mapvalues(tree[['DOM_CODE']],
c('C', 'S', 'I', 'U', 'H', 'A', 'E'),
c('(c)', '(c)', '(c)', '(c)', '(s)', '(g)', '(g)'),
warn_missing = FALSE)
# adding back the new correct dominance codes
tree[['DESC_LATIN']] <- paste(tree[['DESC_LATIN']], tree[['DOM_CODE']], sep=' ')
# some of the dom codes are missing so remove the subsequent NA
tree[['DESC_LATIN']] <- sub(' NA', '', tree[['DESC_LATIN']])
tree[['DESC_LATIN']] <- map_chr(tree[['DESC_LATIN']], rem_dom)
# removing the superfluous dom code column now
tree <- tree[ , !(names(tree) %in% 'DOM_CODE')]
# find unique values
tree <- tree[!duplicated(tree), ]
tree_list[[ii]] <- tree
}
all_trees <- bind_rows(tree_list)
tree_df <- data.frame(wrong_name = sort(unique(all_trees[['DESC_LATIN']])),
right_name = NA)
View(tree_df)
write.csv(tree_df, 'tree_rename.csv', row.names = FALSE)
write.csv(tree_df, 'tree_rename.csv', row.names = FALSE)
lookups <- read_csv(paste0(df_dir, 'species_list.csv'))
MAVIS_species <- lookups$Name
tree_typos <- setdiff(unique(all_trees[['DESC_LATIN']]), MAVIS_species)
tree_df <- data.frame(wrong_name = sort(setdiff(unique(all_trees[['DESC_LATIN']]), MAVIS_species)),
right_name = NA)
write.csv(tree_df, 'tree_rename.csv', row.names = FALSE)
