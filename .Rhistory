myMap.eachLayer(function(layer){
var id = layer.options.layerId;
if (id){
if (baseLayer !== id.substring(25,)){
layer.getElement().style.display = 'none';
}
}
})
})
}", features[1], features[1])
m <- addLayersControl(map = m,
baseGroups = features,
overlayGroups = list_of_habs,
options = layersControlOptions(collapsed = F)
) %>%
htmlwidgets::onRender(
widget_text
) %>%
htmlwidgets::onRender("
function(el, x) {
var updateLegend = function () {
var selectedGroup = document.querySelectorAll('input:checked')[0].nextSibling.innerText.substr(1);
document.querySelectorAll('.legend').forEach(a => a.hidden=true);
document.querySelectorAll('.legend').forEach(l => {
if (l.children[0].children[0].innerText == selectedGroup) l.hidden=false;
});
};
updateLegend();
this.on('baselayerchange', e => updateLegend());
}")
m
setwd("C:/Users/kiera/Work/NE_work")
getwd()
source('./data_prep_figure4.R')
name_gl <- get_names('rename_habitat.csv')
name_swap_vector <- name_gl[[1]]
bb_list <- name_gl[[2]]
bp_list <- name_gl[[3]]
df_all <- read_all_data('all_plots.csv')
# Taking the data from just one site
df <- filter(df_all, SITECODE == 'B14') %>%
fix_names(.) %>%
# transform the eastings and northings into latitude and longitude
transform_coords(.) %>%
filter(YEAR == list_of_years[length(list_of_years)])
df$BAP_BROAD[is.na(df$BAP_BROAD)] <- 'NA'
df$unique_id2 <- as.character(1:length(df$PLOT_ID)) %>%
str_pad(., width = 25, side = 'right', pad = 'z')
setwd("C:/Users/kiera/Work/NE_work")
getwd()
source('./data_prep_figure4.R')
name_gl <- get_names('rename_habitat.csv')
name_swap_vector <- name_gl[[1]]
bb_list <- name_gl[[2]]
bp_list <- name_gl[[3]]
df_all <- read_all_data('all_plots.csv')
# Taking the data from just one site
df <- filter(df_all, SITECODE == 'B14') %>%
fix_names(.) %>%
# transform the eastings and northings into latitude and longitude
transform_coords(.)
df$BAP_BROAD[is.na(df$BAP_BROAD)] <- 'NA'
df$unique_id2 <- as.character(1:length(df$PLOT_ID)) %>%
str_pad(., width = 25, side = 'right', pad = 'z')
features <- c('Species_richness', 'Species_diversity')
centre_coords <- get_centre_coords(df)
east_cent <- centre_coords[[1]]
north_cent <- centre_coords[[2]]
list_of_years <- unique(df$YEAR)
list_of_habs <- unique(df$BAP_BROAD)
print(list_of_habs)
df <- df %>%
filter(YEAR == list_of_years[length(list_of_years)])
factpal_site <- colorFactor(topo.colors(length(list_of_habs)), list_of_habs)
setwd("C:/Users/kiera/Work/NE_work")
getwd()
source('./data_prep_figure4.R')
name_gl <- get_names('rename_habitat.csv')
name_swap_vector <- name_gl[[1]]
bb_list <- name_gl[[2]]
bp_list <- name_gl[[3]]
df_all <- read_all_data('all_plots.csv')
# Taking the data from just one site
df <- filter(df_all, SITECODE == 'B02') %>%
fix_names(.) %>%
# transform the eastings and northings into latitude and longitude
transform_coords(.)
df$BAP_BROAD[is.na(df$BAP_BROAD)] <- 'NA'
df$unique_id2 <- as.character(1:length(df$PLOT_ID)) %>%
str_pad(., width = 25, side = 'right', pad = 'z')
################
features <- c('Species_richness', 'Species_diversity')
centre_coords <- get_centre_coords(df)
east_cent <- centre_coords[[1]]
north_cent <- centre_coords[[2]]
list_of_years <- unique(df$YEAR)
list_of_habs <- unique(df$BAP_BROAD)
print(list_of_habs)
df <- df %>%
filter(YEAR == list_of_years[length(list_of_years)])
factpal_site <- colorFactor(topo.colors(length(list_of_habs)), list_of_habs)
#################
m <- leaflet(df) %>%
addTiles() %>%
setView(lng=east_cent, lat=north_cent, zoom = 14) %>%
addLegend(pal = factpal_site,
values = ~BAP_BROAD,
title = 'Habitat',
position = 'bottomleft')
for (jj in 1:length(features)) {
df_feat <- subset(df, (!is.na(df[,features[jj]])) & (df[,features[jj]] != 0))
domain <- quantile(df_feat[[features[jj]]], probs = seq(0, 1, 1/40))[c(2,40)]
domain <- range(df_feat[[features[jj]]])
pal <- colorNumeric(palette = "Purples", domain = domain)
m <- addCircleMarkers(
map = m,
lat=~coords.northing,
lng=~coords.easting,
color = ~factpal_site(BAP_BROAD),
#color = pal(df_feat[[features[jj]]]),
radius = ~((df_feat[[features[jj]]] / max(df_feat[[features[jj]]])) * 10),
stroke = FALSE, fillOpacity = 1,
group=~BAP_BROAD,
label=df_feat[[features[jj]]],
layerId = ~paste(unique_id2, features[jj], sep=""))
}
widget_text <- sprintf("
function(el, x) {
var myMap = this;
var baseLayer = '%s';
myMap.eachLayer(function(layer){
var id = layer.options.layerId;
if (id){
if ('%s' !== id.substring(25,)){
layer.getElement().style.display = 'none';
}
}
})
console.log(myMap.baselayer);
myMap.on('baselayerchange',
function (e) {
baseLayer=e.name;
myMap.eachLayer(function (layer) {
var id = layer.options.layerId;
if (id){
if (e.name !== id.substring(25,)){
layer.getElement().style.display = 'none';
layer.closePopup();
}
if (e.name === id.substring(25,)){
layer.getElement().style.display = 'block';
}
}
});
})
myMap.on('overlayadd', function(e){
myMap.eachLayer(function(layer){
var id = layer.options.layerId;
if (id){
if (baseLayer !== id.substring(25,)){
layer.getElement().style.display = 'none';
}
}
})
})
}", features[1], features[1])
m <- addLayersControl(map = m,
baseGroups = features,
overlayGroups = list_of_habs,
options = layersControlOptions(collapsed = F)
) %>%
htmlwidgets::onRender(
widget_text
) %>%
htmlwidgets::onRender("
function(el, x) {
var updateLegend = function () {
var selectedGroup = document.querySelectorAll('input:checked')[0].nextSibling.innerText.substr(1);
document.querySelectorAll('.legend').forEach(a => a.hidden=true);
document.querySelectorAll('.legend').forEach(l => {
if (l.children[0].children[0].innerText == selectedGroup) l.hidden=false;
});
};
updateLegend();
this.on('baselayerchange', e => updateLegend());
}")
m
setwd("C:/Users/kiera/Work/NE_work")
getwd()
source('./data_prep_figure4.R')
name_gl <- get_names('rename_habitat.csv')
name_swap_vector <- name_gl[[1]]
bb_list <- name_gl[[2]]
bp_list <- name_gl[[3]]
df_all <- read_all_data('all_plots.csv')
# Taking the data from just one site
df <- filter(df_all, SITECODE == 'B02') %>%
fix_names(.) %>%
# transform the eastings and northings into latitude and longitude
transform_coords(.)
df$BAP_BROAD[is.na(df$BAP_BROAD)] <- 'NA'
df$unique_id2 <- as.character(1:length(df$PLOT_ID)) %>%
str_pad(., width = 25, side = 'right', pad = 'z')
################
features <- c('Species_richness', 'Species_diversity')
centre_coords <- get_centre_coords(df)
east_cent <- centre_coords[[1]]
north_cent <- centre_coords[[2]]
list_of_years <- unique(df$YEAR)
list_of_habs <- unique(df$BAP_BROAD)
print(list_of_habs)
df <- df %>%
filter(YEAR == list_of_years[length(list_of_years)])
#################
m <- leaflet(df) %>%
addTiles() %>%
setView(lng=east_cent, lat=north_cent, zoom = 14)
for (jj in 1:length(features)) {
df_feat <- subset(df, (!is.na(df[,features[jj]])) & (df[,features[jj]] != 0))
domain <- quantile(df_feat[[features[jj]]], probs = seq(0, 1, 1/40))[c(2,40)]
domain <- range(df_feat[[features[jj]]])
pal <- colorNumeric(palette = "Purples", domain = domain)
m <- addCircleMarkers(
map = m,
lat=~coords.northing,
lng=~coords.easting,
#color = ~factpal_site(BAP_BROAD),
color = pal(df_feat[[features[jj]]]),
#radius = ~((df_feat[[features[jj]]] / max(df_feat[[features[jj]]])) * 10),
stroke = FALSE, fillOpacity = 1,
group=~BAP_BROAD,
label=df_feat[[features[jj]]],
layerId = ~paste(unique_id2, features[jj], sep="")) %>%
addLegend(pal = pal,
values = df[[features[jj]]],
title = features[jj],
position = 'bottomleft',
group = features[jj])
}
widget_text <- sprintf("
function(el, x) {
var myMap = this;
var baseLayer = '%s';
myMap.eachLayer(function(layer){
var id = layer.options.layerId;
if (id){
if ('%s' !== id.substring(25,)){
layer.getElement().style.display = 'none';
}
}
})
console.log(myMap.baselayer);
myMap.on('baselayerchange',
function (e) {
baseLayer=e.name;
myMap.eachLayer(function (layer) {
var id = layer.options.layerId;
if (id){
if (e.name !== id.substring(25,)){
layer.getElement().style.display = 'none';
layer.closePopup();
}
if (e.name === id.substring(25,)){
layer.getElement().style.display = 'block';
}
}
});
})
myMap.on('overlayadd', function(e){
myMap.eachLayer(function(layer){
var id = layer.options.layerId;
if (id){
if (baseLayer !== id.substring(25,)){
layer.getElement().style.display = 'none';
}
}
})
})
}", features[1], features[1])
m <- addLayersControl(map = m,
baseGroups = features,
overlayGroups = list_of_habs,
options = layersControlOptions(collapsed = F)
) %>%
htmlwidgets::onRender(
widget_text
) %>%
htmlwidgets::onRender("
function(el, x) {
var updateLegend = function () {
var selectedGroup = document.querySelectorAll('input:checked')[0].nextSibling.innerText.substr(1);
document.querySelectorAll('.legend').forEach(a => a.hidden=true);
document.querySelectorAll('.legend').forEach(l => {
if (l.children[0].children[0].innerText == selectedGroup) l.hidden=false;
});
};
updateLegend();
this.on('baselayerchange', e => updateLegend());
}")
m
print(names(df))
features <- c('MEAN_HEIGHT', 'litter', 'bare.x')
print(names(df))
centre_coords <- get_centre_coords(df)
east_cent <- centre_coords[[1]]
north_cent <- centre_coords[[2]]
list_of_years <- unique(df$YEAR)
list_of_habs <- unique(df$BAP_BROAD)
print(list_of_habs)
df <- df %>%
filter(YEAR == list_of_years[length(list_of_years)])
#################
m <- leaflet(df) %>%
addTiles() %>%
setView(lng=east_cent, lat=north_cent, zoom = 14)
for (jj in 1:length(features)) {
df_feat <- subset(df, (!is.na(df[,features[jj]])) & (df[,features[jj]] != 0))
domain <- quantile(df_feat[[features[jj]]], probs = seq(0, 1, 1/40))[c(2,40)]
domain <- range(df_feat[[features[jj]]])
pal <- colorNumeric(palette = "Purples", domain = domain)
m <- addCircleMarkers(
map = m,
lat=~coords.northing,
lng=~coords.easting,
#color = ~factpal_site(BAP_BROAD),
color = pal(df_feat[[features[jj]]]),
#radius = ~((df_feat[[features[jj]]] / max(df_feat[[features[jj]]])) * 10),
stroke = FALSE, fillOpacity = 1,
group=~BAP_BROAD,
label=df_feat[[features[jj]]],
layerId = ~paste(unique_id2, features[jj], sep="")) %>%
addLegend(pal = pal,
values = df[[features[jj]]],
title = features[jj],
position = 'bottomleft',
group = features[jj])
}
widget_text <- sprintf("
function(el, x) {
var myMap = this;
var baseLayer = '%s';
myMap.eachLayer(function(layer){
var id = layer.options.layerId;
if (id){
if ('%s' !== id.substring(25,)){
layer.getElement().style.display = 'none';
}
}
})
console.log(myMap.baselayer);
myMap.on('baselayerchange',
function (e) {
baseLayer=e.name;
myMap.eachLayer(function (layer) {
var id = layer.options.layerId;
if (id){
if (e.name !== id.substring(25,)){
layer.getElement().style.display = 'none';
layer.closePopup();
}
if (e.name === id.substring(25,)){
layer.getElement().style.display = 'block';
}
}
});
})
myMap.on('overlayadd', function(e){
myMap.eachLayer(function(layer){
var id = layer.options.layerId;
if (id){
if (baseLayer !== id.substring(25,)){
layer.getElement().style.display = 'none';
}
}
})
})
}", features[1], features[1])
m <- addLayersControl(map = m,
baseGroups = features,
overlayGroups = list_of_habs,
options = layersControlOptions(collapsed = F)
) %>%
htmlwidgets::onRender(
widget_text
) %>%
htmlwidgets::onRender("
function(el, x) {
var updateLegend = function () {
var selectedGroup = document.querySelectorAll('input:checked')[0].nextSibling.innerText.substr(1);
document.querySelectorAll('.legend').forEach(a => a.hidden=true);
document.querySelectorAll('.legend').forEach(l => {
if (l.children[0].children[0].innerText == selectedGroup) l.hidden=false;
});
};
updateLegend();
this.on('baselayerchange', e => updateLegend());
}")
m
setwd("C:/Users/kiera/Work/NE_work")
getwd()
source('./data_prep_figure4.R')
name_gl <- get_names('rename_habitat.csv')
name_swap_vector <- name_gl[[1]]
bb_list <- name_gl[[2]]
bp_list <- name_gl[[3]]
df_all <- read_all_data('all_plots.csv')
# Taking the data from just one site
df <- filter(df_all, SITECODE == 'B14') %>%
fix_names(.) %>%
# transform the eastings and northings into latitude and longitude
transform_coords(.)
df$BAP_BROAD[is.na(df$BAP_BROAD)] <- 'NA'
df$unique_id2 <- as.character(1:length(df$PLOT_ID)) %>%
str_pad(., width = 25, side = 'right', pad = 'z')
################
features <- c('MEAN_HEIGHT', 'litter', 'bare.x')
print(names(df))
centre_coords <- get_centre_coords(df)
east_cent <- centre_coords[[1]]
north_cent <- centre_coords[[2]]
list_of_years <- unique(df$YEAR)
list_of_habs <- unique(df$BAP_BROAD)
print(list_of_habs)
df <- df %>%
filter(YEAR == list_of_years[length(list_of_years)])
#################
m <- leaflet(df) %>%
addTiles() %>%
setView(lng=east_cent, lat=north_cent, zoom = 14)
for (jj in 1:length(features)) {
df_feat <- subset(df, !is.na(df[,features[jj]]))
domain <- quantile(df_feat[[features[jj]]], probs = seq(0, 1, 1/40))[c(2,40)]
domain <- range(df_feat[[features[jj]]])
pal <- colorNumeric(palette = "Purples", domain = domain)
m <- addCircleMarkers(
map = m,
lat=~coords.northing,
lng=~coords.easting,
#color = ~factpal_site(BAP_BROAD),
color = pal(df_feat[[features[jj]]]),
#radius = ~((df_feat[[features[jj]]] / max(df_feat[[features[jj]]])) * 10),
stroke = FALSE, fillOpacity = 1,
group=~BAP_BROAD,
label=df_feat[[features[jj]]],
layerId = ~paste(unique_id2, features[jj], sep="")) %>%
addLegend(pal = pal,
values = df[[features[jj]]],
title = features[jj],
position = 'bottomleft',
group = features[jj])
}
widget_text <- sprintf("
function(el, x) {
var myMap = this;
var baseLayer = '%s';
myMap.eachLayer(function(layer){
var id = layer.options.layerId;
if (id){
if ('%s' !== id.substring(25,)){
layer.getElement().style.display = 'none';
}
}
})
console.log(myMap.baselayer);
myMap.on('baselayerchange',
function (e) {
baseLayer=e.name;
myMap.eachLayer(function (layer) {
var id = layer.options.layerId;
if (id){
if (e.name !== id.substring(25,)){
layer.getElement().style.display = 'none';
layer.closePopup();
}
if (e.name === id.substring(25,)){
layer.getElement().style.display = 'block';
}
}
});
})
myMap.on('overlayadd', function(e){
myMap.eachLayer(function(layer){
var id = layer.options.layerId;
if (id){
if (baseLayer !== id.substring(25,)){
layer.getElement().style.display = 'none';
}
}
})
})
}", features[1], features[1])
m <- addLayersControl(map = m,
baseGroups = features,
overlayGroups = list_of_habs,
options = layersControlOptions(collapsed = F)
) %>%
htmlwidgets::onRender(
widget_text
) %>%
htmlwidgets::onRender("
function(el, x) {
var updateLegend = function () {
var selectedGroup = document.querySelectorAll('input:checked')[0].nextSibling.innerText.substr(1);
document.querySelectorAll('.legend').forEach(a => a.hidden=true);
document.querySelectorAll('.legend').forEach(l => {
if (l.children[0].children[0].innerText == selectedGroup) l.hidden=false;
});
};
updateLegend();
this.on('baselayerchange', e => updateLegend());
}")
m
