library(dplyr)
library(leaflet)
library(htmlwidgets)
setwd("C:/Users/kiera/Work/NE_work/Report")
getwd()
source('./data_prep_figure4.R')
bb_list <- get_names('rename_habitat.csv')[[2]]
bp_list <- get_names('rename_habitat.csv')[[3]]
#df_all <- read_all_data('presentation_surveys.xlsx')
df_all <- read_excel("presentation_surveys.xlsx", sheet = "presentation_plots")
# Taking the data from just one site
df <- filter(df_all, SITECODE == 'B12') %>%
# transform the eastings and northings into latitude and longitude
transform_coords(.) %>%
fix_names(.)
print(df$NVC_groupc)
setwd("C:/Users/kiera/Work/NE_work/Report")
getwd()
source('./data_prep_figure4.R')
name_swap_bap <- get_names('rename_habitat.csv')[[1]]
bb_list <- get_names('rename_habitat.csv')[[2]]
bp_list <- get_names('rename_habitat.csv')[[3]]
#df_all <- read_all_data('presentation_surveys.xlsx')
df_all <- read_excel("presentation_surveys.xlsx", sheet = "presentation_plots")
# Taking the data from just one site
df <- filter(df_all, SITECODE == 'B12') %>%
# transform the eastings and northings into latitude and longitude
transform_coords(.) %>%
fix_names(., name_swap_bap)
setwd("C:/Users/kiera/Work/NE_work/Report")
getwd()
source('./data_prep_figure4.R')
name_swap_bap <- get_names('rename_habitat.csv')[[1]]
bb_list <- get_names('rename_habitat.csv')[[2]]
bp_list <- get_names('rename_habitat.csv')[[3]]
#df_all <- read_all_data('presentation_surveys.xlsx')
df_all <- read_excel("presentation_surveys.xlsx", sheet = "presentation_plots")
# Taking the data from just one site
df <- filter(df_all, SITECODE == 'B12') %>%
# transform the eastings and northings into latitude and longitude
transform_coords(.) %>%
fix_names(., name_swap_bap)
setwd("C:/Users/kiera/Work/NE_work/Report")
getwd()
source('./data_prep_figure4.R')
name_swap_bap <- get_names('rename_habitat.csv')[[1]]
bb_list <- get_names('rename_habitat.csv')[[2]]
bp_list <- get_names('rename_habitat.csv')[[3]]
#df_all <- read_all_data('presentation_surveys.xlsx')
df_all <- read_excel("presentation_surveys.xlsx", sheet = "presentation_plots")
# Taking the data from just one site
df <- filter(df_all, SITECODE == 'B12') %>%
# transform the eastings and northings into latitude and longitude
transform_coords(.) %>%
fix_names(., name_swap_bap)
setwd("C:/Users/kiera/Work/NE_work/Report")
getwd()
source('./data_prep_figure4.R')
name_swap_bap <- get_names('rename_habitat.csv')[[1]]
bb_list <- get_names('rename_habitat.csv')[[2]]
bp_list <- get_names('rename_habitat.csv')[[3]]
#df_all <- read_all_data('presentation_surveys.xlsx')
df_all <- read_excel("presentation_surveys.xlsx", sheet = "presentation_plots")
# Taking the data from just one site
df <- filter(df_all, SITECODE == 'B12') %>%
# transform the eastings and northings into latitude and longitude
transform_coords(.) %>%
fix_names(., name_swap_bap)
name_swap_bap <- get_names('rename_habitat.csv')[[1]]
source('./data_prep_figure4.R')
name_swap_bap <- get_names('rename_habitat.csv')[[1]]
source('./data_prep_figure4.R')
name_swap_bap <- get_names('rename_habitat.csv')[[1]]
bb_list <- get_names('rename_habitat.csv')[[2]]
bp_list <- get_names('rename_habitat.csv')[[3]]
#df_all <- read_all_data('presentation_surveys.xlsx')
df_all <- read_excel("presentation_surveys.xlsx", sheet = "presentation_plots")
# Taking the data from just one site
df <- filter(df_all, SITECODE == 'B12') %>%
# transform the eastings and northings into latitude and longitude
transform_coords(.) %>%
fix_names(., name_swap_bap)
print(df$NVC_groupc)
source('./data_prep_figure4.R')
name_swap_bap <- get_names('rename_habitat.csv')[[1]]
name_swap_nvc <- get_names('rename_habitat.csv')[[2]]
bb_list <- get_names('rename_habitat.csv')[[3]]
bp_list <- get_names('rename_habitat.csv')[[4]]
source('./data_prep_figure4.R')
name_swap_bap <- get_names('rename_habitat.csv')[[1]]
name_swap_nvc <- get_names('rename_habitat.csv')[[2]]
bb_list <- get_names('rename_habitat.csv')[[3]]
bp_list <- get_names('rename_habitat.csv')[[4]]
source('./data_prep_figure4.R')
name_swap_bap <- get_names('rename_habitat.csv')[[1]]
name_swap_nvc <- get_names('rename_habitat.csv')[[2]]
bb_list <- get_names('rename_habitat.csv')[[3]]
bp_list <- get_names('rename_habitat.csv')[[4]]
print(df$NVC_groupc)
for (jj in 1:length(name_swap_nvc)) {
df$NVC_groupc <- replace(
df$NVC_groupc,
df$NVC_groupc == names(name_swap_nvc[jj]), name_swap_nvc[jj])
}
print(df$NVC_groupc)
setwd("C:/Users/kiera/Work/NE_work/Report")
getwd()
source('./data_prep_figure4.R')
name_swap_bap <- get_names('rename_habitat.csv')[[1]]
name_swap_nvc <- get_names('rename_habitat.csv')[[2]]
bb_list <- get_names('rename_habitat.csv')[[3]]
bp_list <- get_names('rename_habitat.csv')[[4]]
#df_all <- read_all_data('presentation_surveys.xlsx')
df_all <- read_excel("presentation_surveys.xlsx", sheet = "presentation_plots")
# Taking the data from just one site
df <- filter(df_all, SITECODE == 'B12') %>%
# transform the eastings and northings into latitude and longitude
transform_coords(.) %>%
fix_names(., name_swap_bap)
print(df$NVC_groupc)
name_swap <- function(vector, names) {
for (jj in 1:length(names)) {
vector <- replace(
vector,
vector == names(names[jj]), names[jj])
}
}
name_swap(df$NVC_groupc, name_swap_nvc)
print(df$NVC_groupc)
name_swap <- function(vector, names) {
for (jj in 1:length(names)) {
vector <- replace(
vector,
vector == names(names[jj]), names[jj])
}
return(vector)
}
df$NVC_groupc <- name_swap(df$NVC_groupc, name_swap_nvc)
print(df$NVC_groupc)
setwd("C:/Users/kiera/Work/NE_work/Report")
getwd()
source('./data_prep_figure4.R')
name_swap_bap <- get_names('rename_habitat.csv')[[1]]
name_swap_nvc <- get_names('rename_habitat.csv')[[2]]
bb_list <- get_names('rename_habitat.csv')[[3]]
bp_list <- get_names('rename_habitat.csv')[[4]]
#df_all <- read_all_data('presentation_surveys.xlsx')
df_all <- read_excel("presentation_surveys.xlsx", sheet = "presentation_plots")
# Taking the data from just one site
df <- filter(df_all, SITECODE == 'B12') %>%
# transform the eastings and northings into latitude and longitude
transform_coords(.) %>%
fix_names(., name_swap_bap)
print(df$NVC_groupc)
library(tidyverse)
library(readxl)
library(plyr)
library(matrixStats)
library(diverse)
library(openxlsx)
setwd('C:/Users/kiera/Work/NE_work/Dataframe')
getwd()
################################################################################
# Reading in information from disk
################################################################################
data <- '../Data_set/'
list_of_files <- list.files(data)
N_files <- length(list_of_files)
print(list_of_files)
name_swap <- read.csv('rename_habitat.csv')
name_swap_vector <- with(name_swap, setNames(right_name, wrong_name))
spec_num_list = list()
gf_list = list()
survey_list = list()
for (ii in 1:N_files) {
print(list_of_files[ii])
file_name <- paste(data, list_of_files[ii], sep='')
st <- read_excel(file_name, sheet = "Species Template", na = c('', "NA", "N/A"))
# Getting the names of the columns
col_names <- names(st)
# Getting the names of the CELL columns
cell_names <- col_names[grep('CELL', col_names)]
# converting any non numeric to numeric
st[cell_names] <- lapply(st[cell_names], function(x) as.numeric(as.character(x)))
# converting all plot_ids to character as some are and some are not
st$PLOT_ID <- as.character(st$PLOT_ID)
################################################################################
# Initial edits to species list ready for transformation
# keeping certain columns, changing the plot ID, changing names to pre-approved
# ones, changing missing data to holding place string, redoing freq
################################################################################
# The list of columns I want to keep. only part of the string
keep_list <- c('PLOT_ID', 'DESC', 'CELL', 'PERCENT', 'FREQ')
# Reducing the size of the tibble to only the kept columns
st <- st %>%
select(contains(keep_list))
# There are often many trailing empyty rows
st <- st[!is.na(st$DESC_LATIN), ]
st$PLOT_ID <- as.character(st$PLOT_ID)
# Making the manual swaps
for (jj in 1:length(name_swap_vector)) {
st$DESC_LATIN <- replace(
st$DESC_LATIN,
st$DESC_LATIN == names(name_swap_vector[jj]), name_swap_vector[jj]
)
}
# FIXING THE FREQUENCY COLUMNS
# Changing all missing data in CELL columns to 0
#st[cell_names][is.na(st[cell_names])] <- 0
# Calculating FREQ from the contents of CELL
st <- st %>%
mutate(FREQ2 = rowSums(.[cell_names]))
st$PERCENT_COVER <- as.numeric(st$PERCENT_COVER)
st$FREQ2 <- as.numeric(st$FREQ2)
# Changing all NAs in percent cover or frequency to 999 so they can be
# changed back later after we have dealth with other NAs
st[, c('PERCENT_COVER', 'FREQUENCY')][is.na(st[, c('PERCENT_COVER', 'FREQUENCY')])] <- 999
################################################################################
# Pivotting the data for Frequency
################################################################################
# The list of columns I want to keep. only part of the string
keep_list_freq <- c('PLOT_ID', 'DESC', 'FREQ2')
# Reducing the size of the tibble to only the kept columns
st_freq <- st %>%
select(contains(keep_list_freq))
# Getting a list of the plot IDs
plot_ids <- unique(st_freq['PLOT_ID'])
N_plots <- length(plot_ids$PLOT_ID)
# Making a pivot table for each plot and combining
plot_pivots <- list()
for (jj in 1:N_plots) {
single_plot <- st_freq %>%
# filters for only one plot
filter(PLOT_ID == plot_ids$PLOT_ID[jj]) %>%
# There are lots of instances of more than one of the same species per plot
.[!duplicated(.$DESC_LATIN), ] %>%
# transforms the data into short and fat
pivot_wider(names_from = DESC_LATIN, values_from = FREQ2)
plot_pivots[[jj]] <- single_plot
}
frequency <- rbind.fill(plot_pivots)
# Converting NA to 0
frequency[is.na(frequency)] <- 0
# These ones should be NA, they are missing data from the start
frequency[frequency == 999] <- NA
################################################################################
# Pivotting the data for percent cover
################################################################################
# The list of columns I want to keep. only part of the string
keep_list_pc <- c('PLOT_ID', 'DESC', 'PERCENT_COVER')
# Reducing the size of the tibble to only the kept columns
st_pc <- st %>%
select(contains(keep_list_pc))
# Making a pivot table for each plot and combining
plot_pivots_pc <- list()
for (jj in 1:N_plots) {
single_plot_pc <- st_pc %>%
# filters for only one plot
filter(PLOT_ID == plot_ids$PLOT_ID[jj]) %>%
# There are lots of instances of more than one of the same species per plot
.[!duplicated(.$DESC_LATIN), ] %>%
# transforms the data into short and fat
pivot_wider(names_from = DESC_LATIN, values_from = PERCENT_COVER)
plot_pivots_pc[[jj]] <- single_plot_pc
}
# fills when the columns aren't the same and fills blanks with NA
percent_cover <- rbind.fill(plot_pivots_pc) %>%
as_tibble(.)
# Converting NA to 0
percent_cover[is.na(percent_cover)] <- 0
# These ones should be NA, they are missing data from the start
percent_cover[percent_cover == 999] <- NA
##############################################################################
# joinging with whole plot data
##############################################################################
# The first column is PLOT_ID
spec_names <- names(frequency)[-1]
# Calculating the species diversity from the frequency table
# Has to be done plot by plot as for some reason it mixes the order up!
simpson_div_plot_list = list()
for (jj in 1:N_plots) {
single_plot_freq <- frequency %>%
# filters for only one plot
filter(PLOT_ID == plot_ids$PLOT_ID[jj])
simpson_div_plot_list[[jj]] <- diversity(as.matrix(single_plot_freq[ ,spec_names]), type = "simpson")
}
simpson_div_plot_total <- bind_rows(simpson_div_plot_list)
spec_pp <- tibble(PLOT_ID = frequency$PLOT_ID,
Species_richness = rowSums(frequency[spec_names]!=0),
Species_diversity = simpson_div_plot_total$simpson.I)
# Getting the data out of whole plot data to group the spec data
wpd <- read_excel(file_name, sheet = "Whole Plot Data", na = c('', "NA", "N/A"))
# Always convert to character as some are character and some are num
wpd$PLOT_ID <- as.character(wpd$PLOT_ID)
# These are the columns we want from wpd
wpd_data_cols <- c('PLOT_ID', 'SITECODE', 'YEAR', 'EASTINGS' , 'NORTHINGS',
'BAP_BROAD', 'BAP_PRIORITY', 'NVC_FIRST',
'LIGHT', 'WETNESS', 'PH', 'FERTILITY',
'COMPETITION', 'STRESS', 'RUDERALS')
wpd_data <- wpd %>%
select(contains(wpd_data_cols))
# some of the datse are in date format and some are in string
wpd_data$BAP_BROAD <- str_to_title(wpd_data$BAP_BROAD)
# Helps with some of the typos involving capital letters
# Date is used for CEH
#wpd_data$SDATE <- as.character(wpd_data$SDATE)
# SEPARATING OUT THE NVC COLUMN data
wpd_data$NVC_group <- str_extract(wpd_data$NVC_FIRST, '^.*?(?=:)')
wpd_data$NVC_groupb <- gsub('(\\d)\\D+$', '\\1', wpd_data$NVC_group)
wpd_data$NVC_groupc <- gsub('[0-9]+', '', wpd_data$NVC_groupb)
# Combining on PLOT_ID
spec_pp.bapb <- full_join(spec_pp, wpd_data, by = "PLOT_ID")
spec_num_list[[ii]] <- spec_pp.bapb
##############################################################################
# Ground features
##############################################################################
gf <- read_excel(file_name, sheet = "Ground Features", na = c('', "NA", "N/A"))
# Getting the names of the columns
col_names_gf <- names(gf)
# Getting the names of the CELL columns
cell_names <- col_names_gf[grep('CELL', col_names_gf)]
# converting any non numeric to numeric
gf[cell_names] <- lapply(gf[cell_names], function(x) as.numeric(as.character(x)))
# converting all plot_ids to character as some are and some are not
gf$PLOT_ID <- as.character(gf$PLOT_ID)
# Inconsistencies with cpitalisation across surveys
gf$FEATURE <- tolower(gf$FEATURE)
# basic plot data to append the ground features to
base_df <- tibble(PLOT_ID = wpd$PLOT_ID,
SITECODE = wpd$SITECODE,
YEAR = wpd$YEAR)
# FIXING THE FREQUENCY COLUMNS
keep_cols <- c('PLOT_ID', 'YEAR', 'FEATURE')
# Taking only the vegetaion height rows
# these are treated separately as the data analysis is different (mean)
veg_height <- select(filter(gf, FEATURE == 'vegetation height'),
append(keep_cols, cell_names))
# Creating blank columns so that if there is no veg ehight data, we still
# have oclumns for future steps
veg_height$MEAN_HEIGHT <- NA
veg_height$STD_HEIGHT <- NA
# some surveys dont have veg height data
try(
{veg_height$MEAN_HEIGHT <- rowMeans(veg_height[cell_names], na.rm=TRUE)
# rowStds uses matrixStats package and needs data to be in matrix form
veg_height$STD_HEIGHT <- rowSds(as.matrix(veg_height[cell_names]), na.rm=TRUE)
}
)
base_df <- full_join(base_df,
veg_height[ ,c('PLOT_ID', 'YEAR', 'MEAN_HEIGHT',
'STD_HEIGHT')],
by = c("PLOT_ID", "YEAR"))
# Taking all the rest of the rows
other_rows <- select(filter(gf, FEATURE != 'vegetation height'),
append(keep_cols, cell_names))
# Changing all missing data in CELL columns to 0
other_rows[cell_names][is.na(other_rows[cell_names])] <- 0
# Getting a list of the plot IDs
gf_plot_ids <- unique(other_rows['PLOT_ID'])
gf_N_plots <- length(gf_plot_ids$PLOT_ID)
bare_tib_list = list()
for (jj in 1:gf_N_plots) {
# separating out the data to each plot and only rows with 'bare' in FEATURE
single_bare <- other_rows %>%
filter(PLOT_ID == gf_plot_ids$PLOT_ID[jj]) %>%
.[grep("bare", .$FEATURE), ]
# Create the row for the new bare x feature
bare_tib <- tibble(PLOT_ID = gf_plot_ids$PLOT_ID[jj],
YEAR = other_rows$YEAR[1],
FEATURE = 'bare x')
# Function checks for any 1s in the column
count_bare <- function(col_name) {
sum_col <- 0
try(sum_col <- sum(single_bare[ ,col_name]), silent=TRUE)
if (sum_col == 0) {
return (0)
} else {
return (1)
}
}
# Checking for presence in a bare row and if so counting it as 1
# then inputting that 1 in the appropriate cell column of the new row
for (kk in 1:length(cell_names)) {
bare_tib[ ,cell_names[kk]] <- count_bare(cell_names[kk])
}
# Adding each row to a column, ready to be combined and re-added
bare_tib_list[[jj]] <- bare_tib
}
bare_total <- bind_rows(bare_tib_list)
other_rows <- rbind(other_rows, bare_total)
# Calculating FREQ from the contents of CELL
other_rows <- other_rows %>%
mutate(FREQ = rowSums(.[cell_names]))
# The list of columns I want to keep. only part of the string
keep_list_gf <- c('PLOT_ID', 'FEATURE', 'FREQ')
# Reducing the size of the tibble to only the kept columns
other_rows <- other_rows %>%
select(contains(keep_list_gf))
# Making a pivot table for each plot and combining
plot_pivots_gf <- list()
for (jj in 1:gf_N_plots) {
single_plot_gf <- other_rows %>%
# filters for only one plot
filter(PLOT_ID == gf_plot_ids$PLOT_ID[jj]) %>%
# There are lots of instances of more than one of the same species per plot
.[!duplicated(.$FEATURE), ] %>%
# transforms the data into short and fat
pivot_wider(names_from = FEATURE, values_from = FREQ)
plot_pivots_gf[[jj]] <- single_plot_gf
}
frequency_gf <- rbind.fill(plot_pivots_gf)
# combinigng the beg height data with the frequency data on ground types
# all on a base df which jut containts the plot_id etc
base_df <- full_join(base_df,
veg_height[ ,c('PLOT_ID', 'YEAR', 'MEAN_HEIGHT',
'STD_HEIGHT')],
by = c("PLOT_ID", "YEAR", "MEAN_HEIGHT", "STD_HEIGHT"))
gf_df <- full_join(base_df, frequency_gf, by = "PLOT_ID")
# combining the ground features with the species data
full_survey <- full_join(spec_pp.bapb, gf_df,
by = c("PLOT_ID", "SITECODE", "YEAR"))
survey_list[[ii]] <- full_survey
}
################################################################################
# Combning it together ready for analysis
################################################################################
survey_total <- bind_rows(survey_list)
blank_check <- c('Species_richness', 'bare x', 'NVC_FIRST', 'MEAN_HEIGHT')
blank_len <- length(blank_check)
survey_total <- survey_total[rowSums(is.na(survey_total[,blank_check]))!=blank_len,]
write.csv(survey_total, 'report_plots.csv')
#df_all <- read_all_data('presentation_surveys.xlsx')
#df_all <- read_excel("presentation_surveys.xlsx", sheet = "presentation_plots")
df_all <- read_csv('report_plots.csv')
View(df_all)
write.csv(survey_total, 'report_plots.csv', row.names = FALSE)
#df_all <- read_all_data('presentation_surveys.xlsx')
#df_all <- read_excel("presentation_surveys.xlsx", sheet = "presentation_plots")
df_all <- read_csv('report_plots.csv')
View(df_all)
