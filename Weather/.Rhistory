print(nvc_files$doc_id[ii])
print(ge_files$doc_id[ii])
##############################################################################
# Getting the NVC info out of the mavis outputs
#
# Getting the paragraphs form the NVC output
nvc_para <- tokenize_paragraphs(nvc_files$text[ii])
# Deletes the first paragraph which is just the survey name
nvc_para <- nvc_para[[1]][-1]
nvc_plots_list <- list()
for (jj in 1:length(nvc_para)) {
# extractes the paragraphs in the nvc output
# and turns them into a list of words
nvc_set <- tokenize_words(nvc_para[jj])[[1]]
#nvc_set <- nvc_set[[1]]
# print(nvc_set)
#
# # These capitalise the first letters in the NVC groups
# # but not the letters after the number
# nvc_cap1 <- paste(toupper(str_extract(nvc_set[4], '^(.*?)\\D+')),
#                   gsub('^(.*?)\\D+', '', nvc_set[4]),
#                   sep='')
# nvc_cap2 <- paste(toupper(str_extract(nvc_set[7], '^(.*?)\\D+')),
#                   gsub('^(.*?)\\D+', '', nvc_set[7]),
#                   sep='')
# nvc_cap3 <- paste(toupper(str_extract(nvc_set[10], '^(.*?)\\D+')),
#                   gsub('^(.*?)\\D+', '', nvc_set[10]),
#                   sep='')
#
# # These combine the NVC group and the percentage maps
# # and puts the ifo in a df
# nvc_plots_df <- data.frame(PLOT_ID = nvc_set[2],
#                            nvc1 = paste(nvc_cap1, nvc_set[5], sep=':'),
#                            nvc2 = paste(nvc_cap2, nvc_set[8], sep=':'),
#                            nvc3 = paste(nvc_cap3, nvc_set[11], sep=':'))
plot_nvc <- list('PLOT_ID' = nvc_set[2])
for (kk in 1:10) {
# These capitalise the first letters in the NVC groups
# but not the letters after the number
nvc_class <- paste0(toupper(str_extract(nvc_set[3*kk+1], '^(.*?)\\D+')),
gsub('^(.*?)\\D+', '', nvc_set[3*kk+1]))
# This finds the percentage match
nvc_conf <- nvc_set[3*kk+2]
# and adds them both to the list as one, separated by a colon
plot_nvc[[paste0('NVC', as.character(kk))]] <- paste(nvc_class,
nvc_conf,
sep=':')
}
# converting the list into a df
nvc_plots_df <- do.call(rbind.data.frame, plot_nvc)
nvc_plots_list[[jj]] <- nvc_plots_df
}
nvc_survey <- bind_rows(nvc_plots_list) %>%
tibble(.)
nvc_survey <- nvc_survey %>%
replace_with_na(replace = list(NVC1 = 'FAILED:to',
NCV2 = 'NO:species',
NVC3 = 'NANA:NA'))
##############################################################################
# Getting the grimes and ellenberg info out of the mavis outputs
#
# Getting the paragraphs form the NVC output
ge_para <- tokenize_paragraphs(ge_files$text[ii])
# Deletes the first paragraph whihc is just the survey name
ge_para <- ge_para[[1]][-1]
ge_plots_list <- list()
for (jj in 1:length(ge_para)) {
ge_set <- tokenize_words(ge_para[jj],  strip_punct = FALSE)
ge_set <- ge_set[[1]]
ge_plots_df <- data.frame(PLOT_ID = ge_set[match('plot', ge_set) +1],
light = ge_set[match('light', ge_set) +1],
wetness = ge_set[match('wetness', ge_set) +1],
ph = ge_set[match('ph', ge_set) +1],
fertility = ge_set[match('fertility', ge_set) +1],
competition = get_comp(ge_set),
stress = ge_set[match('s', ge_set) +2],
ruderals = ge_set[match('r', ge_set) +2]
)
ge_plots_list[[jj]] <- ge_plots_df
}
ge_survey <- bind_rows(ge_plots_list)
ge_survey <- tibble(ge_survey)
ge_survey[ge_survey == '0.0'] <- NA
##############################################################################
# Converting the plotids to the old ones
#
rdat_file <- paste(dat_dir, dat_files[ii], sep = '')
#rdat_file <- paste(dat_dir, file_root, '.RData', sep='')
name_dict <- readRDS(rdat_file)
# Making the swaps
for (jj in 1:length(name_dict)) {
# Have to go backwards through the list to not keep changing the same one
for (kk in dim(nvc_survey)[1]:1) {
# Searches for only one change then breaks
if (nvc_survey$PLOT_ID[kk] == names(name_dict[jj])) {
nvc_survey$PLOT_ID[kk] <- name_dict[jj]
break
}
}
# Doing the same but for the GE output now
for (kk in dim(ge_survey)[1]:1) {
# Searches for only one change then breaks
if (ge_survey$PLOT_ID[kk] == names(name_dict[jj])) {
ge_survey$PLOT_ID[kk] <- name_dict[jj]
break
}
}
}
# Removing the -temp from the end of the plot_IDs
nvc_survey$PLOT_ID <- gsub('.{5}$', '', nvc_survey$PLOT_ID)
ge_survey$PLOT_ID <- gsub('.{5}$', '', ge_survey$PLOT_ID)
##############################################################################
# formlating the finalised dataframe for input to excel
#
data_file <- paste(data, data_files[ii], sep = '')
#data_file <- paste(data, file_root, '_published_alldata.XLSX', sep='')
wpd <- read_excel(data_file, sheet = "Whole Plot Data", na = c("NA", "N/A"))
# Getting the names of the columns
col_names <- names(wpd)
# Converting plot_ids to character as some already are and they need to be
# consistent
wpd$PLOT_ID <- as.character(wpd$PLOT_ID)
new_wpd <- full_join(wpd, nvc_survey, by = "PLOT_ID")
new_wpd <- full_join(new_wpd, ge_survey, by = "PLOT_ID")
# Creating the tibble which will populate the updates whole plot data sheet
mavis_out <- tibble(
SITECODE = new_wpd$SITECODE,
MCODE = new_wpd$MCODE,
YEAR = new_wpd$YEAR,
PLOT_ID = new_wpd$PLOT_ID,#paste(new_wpd$SITECODE, new_wpd$YEAR, new_wpd$PLOT_ID, sep='_'),
# NVC_FIRST = new_wpd$nvc1,
# NVC_SECOND = new_wpd$nvc2,
# NVC_THIRD = new_wpd$nvc3,
LIGHT = as.numeric(new_wpd$light),
WETNESS = as.numeric(new_wpd$wetness),
PH = as.numeric(new_wpd$ph),
FERTILITY = as.numeric(new_wpd$fertility),
COMPETITION = as.numeric(new_wpd$competition),
STRESS = as.numeric(new_wpd$stress),
RUDERALS = as.numeric(new_wpd$ruderals))
##############################################################################
# replacing the sheet in excel
#
write.xlsx(list('MAVIS output' = mavis_out), file = "Species_lists.xlsx")
# wb <- createWorkbook()
# MAVIS_sheet <- addWorksheet(wb, 'MAVIS output')
# writeData(wb, MAVIS_sheet, mavis_out)
#
# modifyBaseFont(wb, fontSize = 8, fontName = "Arial")
# new_file_name <- paste(MAVIS_data, file_root, '_MAVIS_output.XLSX', sep='')
# saveWorkbook(wb, new_file_name)
}
View(plot_nvc)
View(nvc_plots_df)
for (ii in 1:dim(nvc_files)[1]) {
file_root <- gsub('.{5}$', '', data_files[ii])
print(data_files[ii])
print(dat_files[ii])
print(nvc_files$doc_id[ii])
print(ge_files$doc_id[ii])
##############################################################################
# Getting the NVC info out of the mavis outputs
#
# Getting the paragraphs form the NVC output
nvc_para <- tokenize_paragraphs(nvc_files$text[ii])
# Deletes the first paragraph which is just the survey name
nvc_para <- nvc_para[[1]][-1]
nvc_plots_list <- list()
for (jj in 1:length(nvc_para)) {
# extractes the paragraphs in the nvc output
# and turns them into a list of words
nvc_set <- tokenize_words(nvc_para[jj])[[1]]
#nvc_set <- nvc_set[[1]]
# print(nvc_set)
#
# # These capitalise the first letters in the NVC groups
# # but not the letters after the number
# nvc_cap1 <- paste(toupper(str_extract(nvc_set[4], '^(.*?)\\D+')),
#                   gsub('^(.*?)\\D+', '', nvc_set[4]),
#                   sep='')
# nvc_cap2 <- paste(toupper(str_extract(nvc_set[7], '^(.*?)\\D+')),
#                   gsub('^(.*?)\\D+', '', nvc_set[7]),
#                   sep='')
# nvc_cap3 <- paste(toupper(str_extract(nvc_set[10], '^(.*?)\\D+')),
#                   gsub('^(.*?)\\D+', '', nvc_set[10]),
#                   sep='')
#
# # These combine the NVC group and the percentage maps
# # and puts the ifo in a df
# nvc_plots_df <- data.frame(PLOT_ID = nvc_set[2],
#                            nvc1 = paste(nvc_cap1, nvc_set[5], sep=':'),
#                            nvc2 = paste(nvc_cap2, nvc_set[8], sep=':'),
#                            nvc3 = paste(nvc_cap3, nvc_set[11], sep=':'))
plot_nvc <- list('PLOT_ID' = nvc_set[2])
for (kk in 1:10) {
# These capitalise the first letters in the NVC groups
# but not the letters after the number
nvc_class <- paste0(toupper(str_extract(nvc_set[3*kk+1], '^(.*?)\\D+')),
gsub('^(.*?)\\D+', '', nvc_set[3*kk+1]))
# This finds the percentage match
nvc_conf <- nvc_set[3*kk+2]
# and adds them both to the list as one, separated by a colon
plot_nvc[[paste0('NVC', as.character(kk))]] <- paste(nvc_class,
nvc_conf,
sep=':')
}
# converting the list into a df
nvc_plots_df <- data.frame(plot_nvc)
nvc_plots_list[[jj]] <- nvc_plots_df
}
nvc_survey <- bind_rows(nvc_plots_list) %>%
tibble(.)
nvc_survey <- nvc_survey %>%
replace_with_na(replace = list(NVC1 = 'FAILED:to',
NCV2 = 'NO:species',
NVC3 = 'NANA:NA'))
##############################################################################
# Getting the grimes and ellenberg info out of the mavis outputs
#
# Getting the paragraphs form the NVC output
ge_para <- tokenize_paragraphs(ge_files$text[ii])
# Deletes the first paragraph whihc is just the survey name
ge_para <- ge_para[[1]][-1]
ge_plots_list <- list()
for (jj in 1:length(ge_para)) {
ge_set <- tokenize_words(ge_para[jj],  strip_punct = FALSE)
ge_set <- ge_set[[1]]
ge_plots_df <- data.frame(PLOT_ID = ge_set[match('plot', ge_set) +1],
light = ge_set[match('light', ge_set) +1],
wetness = ge_set[match('wetness', ge_set) +1],
ph = ge_set[match('ph', ge_set) +1],
fertility = ge_set[match('fertility', ge_set) +1],
competition = get_comp(ge_set),
stress = ge_set[match('s', ge_set) +2],
ruderals = ge_set[match('r', ge_set) +2]
)
ge_plots_list[[jj]] <- ge_plots_df
}
ge_survey <- bind_rows(ge_plots_list)
ge_survey <- tibble(ge_survey)
ge_survey[ge_survey == '0.0'] <- NA
##############################################################################
# Converting the plotids to the old ones
#
rdat_file <- paste(dat_dir, dat_files[ii], sep = '')
#rdat_file <- paste(dat_dir, file_root, '.RData', sep='')
name_dict <- readRDS(rdat_file)
# Making the swaps
for (jj in 1:length(name_dict)) {
# Have to go backwards through the list to not keep changing the same one
for (kk in dim(nvc_survey)[1]:1) {
# Searches for only one change then breaks
if (nvc_survey$PLOT_ID[kk] == names(name_dict[jj])) {
nvc_survey$PLOT_ID[kk] <- name_dict[jj]
break
}
}
# Doing the same but for the GE output now
for (kk in dim(ge_survey)[1]:1) {
# Searches for only one change then breaks
if (ge_survey$PLOT_ID[kk] == names(name_dict[jj])) {
ge_survey$PLOT_ID[kk] <- name_dict[jj]
break
}
}
}
# Removing the -temp from the end of the plot_IDs
nvc_survey$PLOT_ID <- gsub('.{5}$', '', nvc_survey$PLOT_ID)
ge_survey$PLOT_ID <- gsub('.{5}$', '', ge_survey$PLOT_ID)
##############################################################################
# formlating the finalised dataframe for input to excel
#
data_file <- paste(data, data_files[ii], sep = '')
#data_file <- paste(data, file_root, '_published_alldata.XLSX', sep='')
wpd <- read_excel(data_file, sheet = "Whole Plot Data", na = c("NA", "N/A"))
# Getting the names of the columns
col_names <- names(wpd)
# Converting plot_ids to character as some already are and they need to be
# consistent
wpd$PLOT_ID <- as.character(wpd$PLOT_ID)
new_wpd <- full_join(wpd, nvc_survey, by = "PLOT_ID")
new_wpd <- full_join(new_wpd, ge_survey, by = "PLOT_ID")
# Creating the tibble which will populate the updates whole plot data sheet
mavis_out <- tibble(
SITECODE = new_wpd$SITECODE,
MCODE = new_wpd$MCODE,
YEAR = new_wpd$YEAR,
PLOT_ID = new_wpd$PLOT_ID,#paste(new_wpd$SITECODE, new_wpd$YEAR, new_wpd$PLOT_ID, sep='_'),
# NVC_FIRST = new_wpd$nvc1,
# NVC_SECOND = new_wpd$nvc2,
# NVC_THIRD = new_wpd$nvc3,
LIGHT = as.numeric(new_wpd$light),
WETNESS = as.numeric(new_wpd$wetness),
PH = as.numeric(new_wpd$ph),
FERTILITY = as.numeric(new_wpd$fertility),
COMPETITION = as.numeric(new_wpd$competition),
STRESS = as.numeric(new_wpd$stress),
RUDERALS = as.numeric(new_wpd$ruderals))
##############################################################################
# replacing the sheet in excel
#
write.xlsx(list('MAVIS output' = mavis_out), file = "Species_lists.xlsx")
# wb <- createWorkbook()
# MAVIS_sheet <- addWorksheet(wb, 'MAVIS output')
# writeData(wb, MAVIS_sheet, mavis_out)
#
# modifyBaseFont(wb, fontSize = 8, fontName = "Arial")
# new_file_name <- paste(MAVIS_data, file_root, '_MAVIS_output.XLSX', sep='')
# saveWorkbook(wb, new_file_name)
}
View(nvc_plots_df)
View(nvc_survey)
for (ii in 1:dim(nvc_files)[1]) {
file_root <- gsub('.{5}$', '', data_files[ii])
print(data_files[ii])
print(dat_files[ii])
print(nvc_files$doc_id[ii])
print(ge_files$doc_id[ii])
##############################################################################
# Getting the NVC info out of the mavis outputs
#
# Getting the paragraphs form the NVC output
nvc_para <- tokenize_paragraphs(nvc_files$text[ii])
# Deletes the first paragraph which is just the survey name
nvc_para <- nvc_para[[1]][-1]
nvc_plots_list <- list()
for (jj in 1:length(nvc_para)) {
# extractes the paragraphs in the nvc output
# and turns them into a list of words
nvc_set <- tokenize_words(nvc_para[jj])[[1]]
#nvc_set <- nvc_set[[1]]
# print(nvc_set)
#
# # These capitalise the first letters in the NVC groups
# # but not the letters after the number
# nvc_cap1 <- paste(toupper(str_extract(nvc_set[4], '^(.*?)\\D+')),
#                   gsub('^(.*?)\\D+', '', nvc_set[4]),
#                   sep='')
# nvc_cap2 <- paste(toupper(str_extract(nvc_set[7], '^(.*?)\\D+')),
#                   gsub('^(.*?)\\D+', '', nvc_set[7]),
#                   sep='')
# nvc_cap3 <- paste(toupper(str_extract(nvc_set[10], '^(.*?)\\D+')),
#                   gsub('^(.*?)\\D+', '', nvc_set[10]),
#                   sep='')
#
# # These combine the NVC group and the percentage maps
# # and puts the ifo in a df
# nvc_plots_df <- data.frame(PLOT_ID = nvc_set[2],
#                            nvc1 = paste(nvc_cap1, nvc_set[5], sep=':'),
#                            nvc2 = paste(nvc_cap2, nvc_set[8], sep=':'),
#                            nvc3 = paste(nvc_cap3, nvc_set[11], sep=':'))
plot_nvc <- list('PLOT_ID' = nvc_set[2])
for (kk in 1:10) {
# These capitalise the first letters in the NVC groups
# but not the letters after the number
nvc_class <- paste0(toupper(str_extract(nvc_set[3*kk+1], '^(.*?)\\D+')),
gsub('^(.*?)\\D+', '', nvc_set[3*kk+1]))
# This finds the percentage match
nvc_conf <- nvc_set[3*kk+2]
# and adds them both to the list as one, separated by a colon
plot_nvc[[paste0('NVC', as.character(kk))]] <- paste(nvc_class,
nvc_conf,
sep=':')
}
# converting the list into a df
nvc_plots_df <- data.frame(plot_nvc)
nvc_plots_list[[jj]] <- nvc_plots_df
}
nvc_survey <- bind_rows(nvc_plots_list) %>%
tibble(.)
nvc_survey <- nvc_survey %>%
replace_with_na(replace = list(NVC1 = 'FAILED:to',
NVC2 = 'NO:species',
NVC3 = 'NANA:NA'))
##############################################################################
# Getting the grimes and ellenberg info out of the mavis outputs
#
# Getting the paragraphs form the NVC output
ge_para <- tokenize_paragraphs(ge_files$text[ii])
# Deletes the first paragraph whihc is just the survey name
ge_para <- ge_para[[1]][-1]
ge_plots_list <- list()
for (jj in 1:length(ge_para)) {
ge_set <- tokenize_words(ge_para[jj],  strip_punct = FALSE)
ge_set <- ge_set[[1]]
ge_plots_df <- data.frame(PLOT_ID = ge_set[match('plot', ge_set) +1],
light = ge_set[match('light', ge_set) +1],
wetness = ge_set[match('wetness', ge_set) +1],
ph = ge_set[match('ph', ge_set) +1],
fertility = ge_set[match('fertility', ge_set) +1],
competition = get_comp(ge_set),
stress = ge_set[match('s', ge_set) +2],
ruderals = ge_set[match('r', ge_set) +2]
)
ge_plots_list[[jj]] <- ge_plots_df
}
ge_survey <- bind_rows(ge_plots_list)
ge_survey <- tibble(ge_survey)
ge_survey[ge_survey == '0.0'] <- NA
##############################################################################
# Converting the plotids to the old ones
#
rdat_file <- paste(dat_dir, dat_files[ii], sep = '')
#rdat_file <- paste(dat_dir, file_root, '.RData', sep='')
name_dict <- readRDS(rdat_file)
# Making the swaps
for (jj in 1:length(name_dict)) {
# Have to go backwards through the list to not keep changing the same one
for (kk in dim(nvc_survey)[1]:1) {
# Searches for only one change then breaks
if (nvc_survey$PLOT_ID[kk] == names(name_dict[jj])) {
nvc_survey$PLOT_ID[kk] <- name_dict[jj]
break
}
}
# Doing the same but for the GE output now
for (kk in dim(ge_survey)[1]:1) {
# Searches for only one change then breaks
if (ge_survey$PLOT_ID[kk] == names(name_dict[jj])) {
ge_survey$PLOT_ID[kk] <- name_dict[jj]
break
}
}
}
# Removing the -temp from the end of the plot_IDs
nvc_survey$PLOT_ID <- gsub('.{5}$', '', nvc_survey$PLOT_ID)
ge_survey$PLOT_ID <- gsub('.{5}$', '', ge_survey$PLOT_ID)
##############################################################################
# formlating the finalised dataframe for input to excel
#
data_file <- paste(data, data_files[ii], sep = '')
#data_file <- paste(data, file_root, '_published_alldata.XLSX', sep='')
wpd <- read_excel(data_file, sheet = "Whole Plot Data", na = c("NA", "N/A"))
# Getting the names of the columns
col_names <- names(wpd)
# Converting plot_ids to character as some already are and they need to be
# consistent
wpd$PLOT_ID <- as.character(wpd$PLOT_ID)
new_wpd <- full_join(wpd, nvc_survey, by = "PLOT_ID")
new_wpd <- full_join(new_wpd, ge_survey, by = "PLOT_ID")
# Creating the tibble which will populate the updates whole plot data sheet
mavis_out <- tibble(SITECODE = new_wpd$SITECODE,
MCODE = new_wpd$MCODE,
YEAR = new_wpd$YEAR,
PLOT_ID = new_wpd$PLOT_ID,#paste(new_wpd$SITECODE, new_wpd$YEAR, new_wpd$PLOT_ID, sep='_'),
# NVC_FIRST = new_wpd$nvc1,
# NVC_SECOND = new_wpd$nvc2,
# NVC_THIRD = new_wpd$nvc3,
LIGHT = as.numeric(new_wpd$light),
WETNESS = as.numeric(new_wpd$wetness),
PH = as.numeric(new_wpd$ph),
FERTILITY = as.numeric(new_wpd$fertility),
COMPETITION = as.numeric(new_wpd$competition),
STRESS = as.numeric(new_wpd$stress),
RUDERALS = as.numeric(new_wpd$ruderals)) %>%
full_join(., nvc_survey, by = 'PLOT_ID')
##############################################################################
# replacing the sheet in excel
#
write.xlsx(list('MAVIS output' = mavis_out), file = "Species_lists.xlsx")
# wb <- createWorkbook()
# MAVIS_sheet <- addWorksheet(wb, 'MAVIS output')
# writeData(wb, MAVIS_sheet, mavis_out)
#
# modifyBaseFont(wb, fontSize = 8, fontName = "Arial")
# new_file_name <- paste(MAVIS_data, file_root, '_MAVIS_output.XLSX', sep='')
# saveWorkbook(wb, new_file_name)
}
setwd('C:/Users/kiera/Work/NE_work/Weather/')
data_dir <- './MET/'
data_files <- list.files(data_dir)
print(paste0(data_dir, data_files[[1]]))
install.packages("raster")
install.packages("ncdf4")
library(raster)
dat1 <- brick(paste0(data_dir, data_files[[1]]))
dat1
plot(dat1)
plot(dat1[[1]])
snap1 <- dat[[45]]
plot(snap1)
snap1 <- dat1[[45]]
plot(snap1)
snap1 <- dat1[[3]]
plot(snap1)
print(length(dat1))
snap1 <- dat1[[9]]
plot(snap1)
snap1 <- dat1[[435345]]
plot(snap1)
snap1 <- dat1[[23]]
plot(snap1)
site_perimeter <- extent(400000, 600000, 200000, 400000)
snap1.crop <- crop(snap1, site_perimeter)
plot(snap1.crop)
plot(snap1)
survey_dir <- '../Data_set/'
survey_files <- list.files(data_dir)
survey_dir <- '../Data_set/'
survey_files <- list.files(data_dir)
file_path <- paste0(survey_dir, data_dir[[1]])
species <- read_excel(file_path, sheet = "Whole Plot Data")
survey_dir <- '../Data_set/'
survey_files <- list.files(data_dir)
file_path <- paste0(survey_dir, survey_files[[1]])
species <- read_excel(file_path, sheet = "Whole Plot Data")
survey_dir <- '../Data_set/'
survey_files <- list.files(survey_dir)
file_path <- paste0(survey_dir, survey_files[[1]])
species <- read_excel(file_path, sheet = "Whole Plot Data")
print(max(species$EASTINGS))
install.packages("rgdal")
